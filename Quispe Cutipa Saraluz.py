# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EXlp6QdrprNvZuMXAgvgvY8EfpL1TjQF
"""

import numpy as np

# 1. Crear un array 7x8 lleno de ceros de tipo entero
array1 = np.zeros((7, 8), dtype=int)
print("Array 1:")
print(array1)

# 2. Crear un array 7x8 lleno de ceros salvo la primera fila que serán todo unos
array2 = np.zeros((7, 8), dtype=int)
array2[0, :] = 1
print("\nArray 2:")
print(array2)

# 3. Crear un array 7x8 lleno de ceros salvo la última fila que será el rango entre 5 y 8
# Nota: 5 a 8 en Python normalmente es [5, 6, 7, 8] → 4 elementos. Para 8 elementos repetimos si es necesario.
array3 = np.zeros((7, 8), dtype=int)
# Podemos usar np.linspace para distribuir 8 valores entre 5 y 8 o repetir el rango [5,6,7,8,5,6,7,8] si ese es el sentido.
array3[-1, :] = np.array([5, 6, 7, 8, 5, 6, 7, 8])
print("\nArray 3:")
print(array3)

import numpy as np

# Crear un vector de 10 elementos: impares → 1, pares → 2 (posición, no valor)
vector = np.array([1 if i % 2 != 0 else 2 for i in range(10)])
print("Vector de 10 elementos (impares=1, pares=2):")
print(vector)

import numpy as np  # ¡IMPORTANTE! Esto define 'np'

# Crear un tablero 8x8 de ajedrez con 1 en casillas negras y 0 en blancas
tablero = np.zeros((8, 8), dtype=int)

# Llenar las casillas negras con 1: patrón alternante
tablero[1::2, 0::2] = 1  # filas impares, columnas pares
tablero[0::2, 1::2] = 1  # filas pares, columnas impares

print("Tablero de ajedrez 8x8:")
print(tablero)

import numpy as np

# 1. Crear una matriz aleatoria 7x7
matriz = np.random.rand(7, 7)  # valores entre 0 y 1
print("Matriz aleatoria 7x7:")
print(matriz)

# 2. Hallar los valores mínimo y máximo
min_val = matriz.min()
max_val = matriz.max()
print("\nValor mínimo:", min_val)
print("Valor máximo:", max_val)

# 3. Normalizar la matriz entre 0 y 1 usando la fórmula:
# X_normalizado = (X - min) / (max - min)
matriz_normalizada = (matriz - min_val) / (max_val - min_val)
print("\nMatriz normalizada entre 0 y 1:")
print(matriz_normalizada)

import numpy as np

# 1. Definir la matriz
matriz = np.array([
    [1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 9, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1]
])

# 2. Valor mínimo y máximo
min_val = matriz.min()
max_val = matriz.max()
print("Mínimo:", min_val)
print("Máximo:", max_val)

# 3. Normalización entre 0 y 1
matriz_normalizada = (matriz - min_val) / (max_val - min_val)
print("\nMatriz normalizada:")
print(matriz_normalizada)

import numpy as np

# Matriz original
matriz = np.array([
    [1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 9, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1]
])

# Intercambiar valores: 1 → -1, 9 → 1, luego -1 → 9
matriz[matriz == 1] = -1
matriz[matriz == 9] = 1
matriz[matriz == -1] = 9

print("Matriz con valores 1 y 9 invertidos:")
print(matriz)

import numpy as np

# Crear la matriz 6x5 (valores del 1 al 30)
matriz = np.arange(1, 31).reshape(6, 5)
print("Matriz original:")
print(matriz)
rojo_1 = matriz[0:2, 3:5]   # filas 0-1, columnas 3-4
rojo_2 = matriz[4:6, 3:5]   # filas 4-5, columnas 3-4

print("Submatriz roja (superior derecha):")
print(rojo_1)
print("Submatriz roja (inferior derecha):")
print(rojo_2)
verde = matriz[0:3, 1:4]   # filas 0-2, columnas 1-3
print("Submatriz verde:")
print(verde)
azul = matriz[2:4, 0:3]    # filas 2-3, columnas 0-2
print("Submatriz azul:")
print(azul)

import numpy as np

# 1. Matriz verde original (6x6)
matriz = np.array([
    [255, 34, 45, 16, 24, 99],
    [200, 50, 67, 15, 66, 88],
    [120, 100, 45, 50, 26, 70],
    [45, 25, 50, 0, 255, 0],
    [36, 255, 24, 78, 77, 23],
    [36, 255, 24, 78, 77, 23]
])

# 2. Matriz celeste (bloque 3x3)
bloque = np.array([
    [0, 0, 0],
    [0, 255, 0],
    [0, 0, 0]
])

# 3. Función para reemplazar el bloque donde esté el 50
def reemplazar_valor(matriz, bloque, objetivo=50):
    salida = matriz.copy()
    filas, columnas = matriz.shape

    for i in range(1, filas - 1):
        for j in range(1, columnas - 1):
            if matriz[i, j] == objetivo:
                salida[i-1:i+2, j-1:j+2] = bloque
    return salida

# 4. Aplicar la función
resultado = reemplazar_valor(matriz, bloque)

print("Matriz con los bloques celestes reemplazando los 50s:")
print(resultado)